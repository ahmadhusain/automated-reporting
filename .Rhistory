data = data_agg,
xname = "month",
yname = "total_quantity",
title = "Monthly Quantity of Avocado Sold",
sub = glue(
"for {params$avocado_type} avocados",
" in {params$avocado_region},",
" {params$avocado_year}"
),
label = TRUE
)
data_agg <- data_clean %>%
group_by(month = month(date, label = TRUE, abbr = FALSE)) %>%
summarise(total_quantity = sum(quantity)) %>%
ungroup() %>%
mutate(label = glue("{comma(total_quantity)}"))
data_agg
data_agg <- data_clean %>%
group_by(month = month(date, label = TRUE, abbr = FALSE)) %>%
summarise(total_quantity = sum(quantity)) %>%
ungroup() %>%
mutate(label = glue("{comma(total_quantity)}"))
barplot_report(
data = data_agg,
xname = "month",
yname = "total_quantity",
title = "Monthly Quantity of Avocado Sold",
sub = glue(
"for {params$avocado_type} avocados",
" in {params$avocado_region},",
" {params$avocado_year}"
),
label = TRUE
)
top_quantity <- data_agg %>%
arrange(desc(total_quantity)) %>%
slice(1)
top_quantity
pull(top_quantity, month)
pull(top_quantity, month) %>% as.character()
tot_quantity <- data_agg %>%
arrange(desc(total_quantity)) %>%
slice(1) %>%
pull(label)
tot_quantity <- data_agg %>%
arrange(desc(total_quantity)) %>%
slice(1) %>%
pull(label)
tot_quantity
scatterplot_report(
data = data_clean,
xname = "price",
yname = "quantity"
)
scatterplot_report(
data = data_clean,
xname = "price",
yname = "quantity",
axisycurrency = FALSE
)
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
library(tidyverse)
library(scales)
library(lubridate)
library(kableExtra)
library(glue)
source("R/helper.R")
data_avocado <- read.csv(file = "data-avocados.csv")
head(data_avocado)
densityplot_report(
data = data_avocado,
xname = "price",
fillby = "type",
title = "Distribution of Avocado Price",
sub = "Organic vs Conventional Cultivation",
showlegend = TRUE
)
# make a copy
data_clean <- data_avocado
# filter to specific groups
data_clean <- data_clean %>%
filter(
region == params$avocado_region,
year(date) == params$avocado_year,
type == params$avocado_type
)
head(data_clean)
data_agg <- data_clean %>%
group_by(month = month(date, label = TRUE, abbr = FALSE)) %>%
summarise(total_quantity = sum(quantity)) %>%
ungroup() %>%
mutate(label = glue("{comma(total_quantity)}"))
top_month <- data_agg %>%
arrange(desc(total_quantity)) %>%
slice(1) %>%
pull(month) %>%
as.character()
tot_quantity <- data_agg %>%
arrange(desc(total_quantity)) %>%
slice(1) %>%
pull(label)
barplot_report(
data = data_agg,
xname = "month",
yname = "total_quantity",
title = "Monthly Quantity of Avocado Sold",
sub = glue(
"for {params$avocado_type} avocados",
" in {params$avocado_region},",
" {params$avocado_year}"
),
label = TRUE
)
scatterplot_report(
data = data_clean,
xname = "price",
yname = "quantity",
axisycurrency = FALSE
)
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
library(tidyverse)
library(scales)
library(lubridate)
library(kableExtra)
library(glue)
source("R/helper.R")
data_avocado <- read.csv(file = "data-avocados.csv")
head(data_avocado)
densityplot_report(
data = data_avocado,
xname = "price",
fillby = "type",
title = "Distribution of Avocado Price",
sub = "Organic vs Conventional Cultivation",
showlegend = TRUE
)
# make a copy
data_clean <- data_avocado
# filter to specific groups
data_clean <- data_clean %>%
filter(
region == params$avocado_region,
year(date) == params$avocado_year,
type == params$avocado_type
)
head(data_clean)
data_agg <- data_clean %>%
group_by(month = month(date, label = TRUE, abbr = FALSE)) %>%
summarise(total_quantity = sum(quantity)) %>%
ungroup() %>%
mutate(label = glue("{comma(total_quantity)}"))
top_month <- data_agg %>%
arrange(desc(total_quantity)) %>%
slice(1) %>%
pull(month) %>%
as.character()
tot_quantity <- data_agg %>%
arrange(desc(total_quantity)) %>%
slice(1) %>%
pull(label)
barplot_report(
data = data_agg,
xname = "month",
yname = "total_quantity",
title = "Monthly Quantity of Avocado Sold",
sub = glue(
"for {params$avocado_type} avocados",
" in {params$avocado_region},",
" {params$avocado_year}"
),
label = TRUE
)
scatterplot_report(
data = data_clean,
xname = "price",
yname = "quantity",
axisycurrency = FALSE
)
scatterplot_report <- function(data, xname, yname,
title = NULL, sub = NULL,
caption = NULL, fillby = NULL,
showlegend = FALSE,
axisxcurrency = TRUE,
axisycurrency = TRUE){
library(ggplot2)
xcol <- sym(xname)
ycol <- sym(yname)
geompoint <- if(is.null(fillby)) {
geom_point(colour = "blue")
} else {
fillby <- sym(fillby)
geom_point(aes(colour = !!fillby))
}
legend <- if(showlegend) {
theme(legend.position = "top")
} else {
theme(legend.position = "none")
}
scaley <- if(axisycurrency){
scale_y_continuous(labels = dollar_format(accuracy = 2, big.mark = ","))
} else {
scale_y_continuous(labels = number_format(big.mark = ","))
}
scalex <- if(axisxcurrency){
scale_x_continuous(labels = dollar_format(big.mark = ","))
} else {
scale_x_continuous(labels = number_format(big.mark = ",", accuracy = 2))
}
ggplot(data, aes(x = !!xcol, y = !!ycol)) +
geompoint +
geom_smooth(method = "loess", se = FALSE, colour ="dark red") +
scalex +
scaley +
labs(
title = title,
subtitle = sub,
caption = caption,
x = NULL,
y = NULL
) +
ggthemes::theme_pander() +
legend
}
scatterplot_report(
data = data_clean,
xname = "price",
yname = "quantity",
axisycurrency = FALSE
)
scatterplot_report(
data = data_clean,
xname = "price",
yname = "quantity",
axisycurrency = FALSE,
title = "Price and Quantity of Avocados Sales",
sub = "for {params$avocado_type} avocados",
" in {params$avocado_region},",
" {params$avocado_year}"
)
scatterplot_report(
data = data_clean,
xname = "price",
yname = "quantity",
axisycurrency = FALSE,
title = "Price and Quantity of Avocados Sales",
sub = glue(
"for {params$avocado_type} avocados",
" in {params$avocado_region},",
" {params$avocado_year}"
)
)
# set seed
set.seed(100)
# create initial split
splitted <- initial_split(data_clean, prop = 0.6, strata = "price")
library(rsample)
# set seed
set.seed(100)
# create initial split
splitted <- initial_split(data_clean, prop = 0.6)
# set seed
set.seed(100)
# create initial split
splitted <- initial_split(data_clean, prop = 0.6)
data_train <- training(splitted)
data_test <- testing(splitted)
model_lm <- lm(quantity ~ price, data = data_train)
tidy(model_lm)
model_lm <- lm(quantity ~ price, data = data_train)
# tidy the model
data_model <- tidy(model_lm) %>%
rename(
Terms = term,
Coefficients = estimate,
`Standard Error` = std.error,
`t-statistics` = statistic,
`p-value` = p.value
)
data_model
coefs <- data_model %>%
filter(Terms == "price") %>%
pull(Coefficients)
coefs_print <- unit_format(scale = 1e-6, accuracy = 1e-4, unit = "Million")(abs(coefs))
# print the model
kable(data_model)
data_prediction
predict(model_lm, data_test)
data_test %>%
mutate(prediction = predict(model_lm, data_test))
data_test %>%
mutate(prediction = predict(model_lm, data_test)) %>%
select(price, quantity, prediction)
data_print <- data_test %>%
mutate(prediction = predict(model_lm, data_test)) %>%
select(price, quantity, prediction)
# print the results
kable(head(data_print, 5))
data_test %>%
mutate(prediction = predict(model_lm, data_test))
library(MLmetrics)
data_test %>%
mutate(prediction = predict(model_lm, data_test))
data_prediction <- data_test %>%
mutate(prediction = predict(model_lm, data_test))
MAE(y_pred = data_prediction$prediction, y_true = data_prediction$quantity)
coefs <- MAE(y_pred = data_prediction$prediction, y_true = data_prediction$quantity)
coefs_print <- unit_format(scale = 1e-3, accuracy = 1, unit = "K")(coefs)
coefs_print
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
library(tidyverse)
library(scales)
library(glue)
library(ggplot2)
source(file = "R/helper.R")
data_attrition <- read_csv("data-attrition.csv") %>%
string_norm() %>%
filter(Marital_Status == params$marital, Gender == params$gender)
# aggregation
data_agg <- data_attrition %>%
group_by(Department, Attrition) %>%
summarise(Freq = n()) %>%
ungroup()
# print some examples
head(data_agg)
# prepare visualization data
data_viz <- data_agg %>%
filter(Attrition == "Yes")
# print some example
head(data_viz)
# aggregation
data_agg <- data_attrition %>%
group_by(Education_Field) %>%
summarise(n = n()) %>%
ungroup()
# print some examples
head(data_agg)
# prepare visualization data
data_viz <- data_agg %>%
mutate(
Education_Field = Education_Field %>%
str_replace_all(pattern = "_", replacement = " ") %>%
str_squish(),
Education_Field = reorder(Education_Field, -n),
n_percent = percent(n / sum(n)),
label = glue("{n} ({n_percent})")
)
highest_edu <- data_viz %>%
arrange(desc(n)) %>%
slice(1) %>%
pull(Education_Field) %>%
as.character()
lowest_edu <- data_viz %>%
arrange(n) %>%
slice(1) %>%
pull(Education_Field) %>%
as.character()
#visualize
barplot_report(
data = data_viz,
xname = "Education_Field",
yname = "n"
title = "Number of employee",
#visualize
barplot_report(
data = data_viz,
xname = "Education_Field",
yname = "n",
title = "Number of employee",
sub = "reported from a batch of employee by education fields",
label = TRUE,
showlegend = FALSE
)
# aggregation
data_agg <- data_attrition %>%
group_by(Job_Role) %>%
summarise(n = n()) %>%
ungroup()
# print some examples
head(data_agg)
# prepare visualization data
data_viz <- data_agg %>%
mutate(
Job_Role = Job_Role %>%
str_replace_all(pattern = "_", replacement = " ") %>%
str_squish(),
Job_Role = reorder(Job_Role, n),
n_percent = percent(n / sum(n)),
label = glue("{n} ({n_percent})")
)
# visualize
barplot_report(
data = data_viz,
xname = "Job_Role",
yname = "n",
title = "Number of Employee",
sub = "Reported from a batch of employee by job roles",
caption = "Source: IBM Watson",
flip = TRUE,
label = TRUE,
showlegend = FALSE
)
# aggregation
data_agg <- data_attrition %>%
group_by(Job_Role, Attrition) %>%
summarise(n = n()) %>%
ungroup()
# print some examples
head(data_agg)
# prepare visualization data
data_viz <- data_agg %>%
mutate(
Job_Role = Job_Role %>%
str_replace_all("_", " ") %>%
str_squish(),
Job_Role = reorder(Job_Role, n),
Attrition = Attrition %>%
str_to_title() %>%
factor(levels = c("Yes", "No"))
)
# visualize
barplot_report(
data = data_viz,
xname = "Job_Role",
yname = "n",
fillby = "Attrition",
flip = TRUE,
title = "Number of employee",
sub = "reported from a batch of employee by job roles",
caption = "Source: IBM Watson",
showlegend = TRUE
)
high_prop <- data_viz %>%
group_by(Job_Role) %>%
mutate(prop_attrition = n/sum(n)) %>%
ungroup() %>%
filter(Attrition == "Yes") %>%
arrange(desc(prop_attrition)) %>%
slice(1) %>%
pull(Job_Role) %>%
as.character()
densityplot_report(
data = data_attrition,
xname = "Monthly_Income",
title = "Monthly income distribution",
sub = "estimated using kernel density function",
caption = "Source: IBM Watson",
)
# prepare visualization data
data_viz <- data_attrition %>%
mutate(
Attrition = Attrition %>%
str_to_title() %>%
factor(levels = c("Yes", "No"))
)
# visualize
densityplot_report(
data = data_viz,
xname = "Monthly_Income",
title = "Monthly income distribution",
sub = "estimated using kernel density function",
caption = "Source: IBM Watson",
fillby = "Attrition", showlegend = TRUE
)
# aggregation
data_agg <- data_attrition %>%
group_by(Years_At_Company) %>%
summarise(Monthly_Income = median(Monthly_Income)) %>%
ungroup()
# print some examples
head(data_agg)
# visualize
scatterplot_report(
data = data_agg,
xname = "Years_At_Company",
yname = "Monthly_Income",
title = "The relation of years at the company and monthly income",
sub = "using median value from laboratory technician samples",
caption = "Source: IBM Watson",
axisxcurrency = FALSE
)
data_avocado <- read_csv("data-avocados.csv")
data_avocado <- read_csv("data-avocados.csv")
data_avocado <- read.csv("data-avocados.csv")
range(data_avocado$date)
knitr::opts_chunk$set(
echo = FALSE,
message = FALSE,
warning = FALSE
)
data_avocado <- read.csv(file = "data-avocados.csv")
head(data_avocado)
tail(data_avocado)
shiny::runApp('template/price-elasticity')
runApp('template/price-elasticity')
runApp('template/price-elasticity')
runApp('template/price-elasticity')
getwd()
runApp('template/price-elasticity')
runApp('template/price-elasticity')
runApp('template/price-elasticity')
